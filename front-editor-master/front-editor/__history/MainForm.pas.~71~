unit MainForm;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, Menus, StdCtrls, ComCtrls, ExtCtrls, SynEditExport, SynExportHTML, SynEdit,
  SynMemo, SynEditHighlighter, SynHighlighterJava;

type
  TMain = class(TForm)
    MainMenu1: TMainMenu;
    MenuFile: TMenuItem;
    OpenProject: TMenuItem;
    CloseApp: TMenuItem;
    MenuAbout: TMenuItem;
    OpenFile: TOpenDialog;
    SaveFile: TSaveDialog;
    SaveProject: TMenuItem;
    Tree: TMemo;
    TreeView1: TTreeView;
    SynEdit1: TSynEdit;
    procedure SynEdit1Change(Sender: TObject);
    procedure EditorChange(Sender: TObject);
    procedure RichEdit1Change(Sender: TObject);
    procedure SaveProjectClick(Sender: TObject);
    procedure OpenProjectClick(Sender: TObject);
  private

  public
    { Public declarations }
  end;

var
  Main: TMain;
  FName: string;

implementation

{$R *.dfm}

procedure HTMLSyntax(SynEdit: TSynEdit; TextCol, TagCol, DopCol: TColor);
var
  i,
  iDop : integer;
  s    : string;
  Col  : TColor;
  isTag,
  isDop: boolean;
begin { HTMLSyntax }
  iDop := 0; 
  isDop := False; 
  isTag := False; 
  Col := TextCol; 
  SynEdit.SetFocus;
  
  for i := 0 to Length(SynEdit.Text) do
  begin 
    SynEdit.SelStart := i;
    SynEdit.SelLength := 1;
    s := SynEdit.SelText;
    
    if (s='<') or (s=char(123)) then 
      isTag := True; 

    if isTag then 
      if (s=char(34)) then 
        if not isDop then 
        begin 
          iDop := 1; 
          isDop := True
        end { not isDop } 
        else 
          isDop := False; 
    
    if isTag then 
      if isDop then 
      begin 
        if iDop<>1 then 
          Col := DopCol
      end { isDop } 
      else 
        Col := TagCol 
    else 
      Col := TextCol; 
        SynEdit.SelectedColor.Background := Col;
    //SynEdit.SelAttributes.Color := Col;
    
    iDop := 0; 
    
    if (s='>') or (s=char(125)) then 
      isTag := False
  end; { for i } 
  SynEdit.SelLength := 0
end; { HTMLSyntax }

 {
procedure TMain.Button1Click(Sender: TObject);
begin { TForm1.Button1Click }
{
  RichEdit1.Lines.BeginUpdate;
  HTMLSyntax(RichEdit1, clBlue, clRed, clGreen);
  RichEdit1.Lines.EndUpdate
end;} { TForm1.Button1Click }
  {
procedure TMain.EditorChange(Sender: TObject);
begin
     HTMLSyntax(Editor, clBlue, clRed, clGreen);
end;
                }
procedure TMain.OpenProjectClick(Sender: TObject);
var sr: TSearchRec;
    Text: String;
    i, a: Integer;
    tags : TStringList;
begin
 if OpenFile.Execute then
 begin
  FName := OpenFile.FileName;
  Editor.Lines.LoadFromFile(FName);
 end;

begin
 Tree.Clear;
 if FindFirst('*.*', faAnyFile, sr) = 0 then
  begin
  repeat
  Tree.Lines.Add(sr.Name);
  until FindNext(sr) <> 0;
  FindClose(sr);
end;
end;
end;

procedure TMain.RichEdit1Change(Sender: TObject);
begin
 // RichEdit1.Lines.BeginUpdate;
 // HTMLSyntax(Editor, clBlue, clRed, clGreen);
 // RichEdit1.Lines.EndUpdate
end;

procedure TMain.SaveProjectClick(Sender: TObject);
begin
SaveFile.FileName := FName;
if SaveFile.Execute then
 begin
  FName := SaveFile.FileName;
  Editor.Lines.SaveToFile(FName);
end;
end;

procedure TMain.SynEdit1Change(Sender: TObject);
begin
       HTMLSyntax(Editor, clBlue, clRed, clGreen);
end;

end.
